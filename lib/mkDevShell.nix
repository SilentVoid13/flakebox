{ pkgs
, rust-analyzer
, toolchain
, rustfmt
}:
let defaultToolchain = toolchain; in

{ packages ? [ ]
, toolchain ? defaultToolchain
} @ args:

let

  cleanedArgs = removeAttrs args [
    "toolchain"
  ];
in
pkgs.mkShell (cleanedArgs // {
  packages =
    packages ++ [
      toolchain
      rustfmt
      rust-analyzer


      # This is required to prevent a mangled bash shell in nix develop
      # see: https://discourse.nixos.org/t/interactive-bash-with-nix-develop-flake/15486
      (pkgs.hiPrio pkgs.bashInteractive)
      pkgs.nodePackages.bash-language-server
    ] ++ (builtins.attrValues {
      # Cure & generic
      inherit (pkgs) git coreutils parallel shellcheck;
      # Nix
      inherit (pkgs) nixpkgs-fmt nil;
      # Rust tools
      inherit (pkgs) cargo-watch convco typos just;
      # Linkers
      inherit (pkgs) lld;
    })
  ;

  shellHook = ''
    # This file was auto-generated by rustshop/flakebox
    dot_git="$(${pkgs.git}/bin/git rev-parse --git-common-dir)"
    if [[ ! -d "''${dot_git}/hooks" ]]; then mkdir "''${dot_git}/hooks"; fi

    rm -f "''${dot_git}/hooks/pre-commit"
    rm -f "''${dot_git}/hooks/commit-msg"
    ln -sf ${./git/pre-commit} "''${dot_git}/hooks/pre-commit"
    ln -sf ${./git/commit-msg} "''${dot_git}/hooks/commit-msg"
    
    ln -sf ${./misc/justfile} "./justfile"

    ${pkgs.git}/bin/git config commit.template ${./git/commit-template.txt}

    # if running in direnv
    if [ -n "''${DIRENV_IN_ENVRC:-}" ]; then
      # and not set DIRENV_LOG_FORMAT
      if [ -n "''${DIRENV_LOG_FORMAT:-}" ]; then
        >&2 echo "ğŸ’¡ Set 'DIRENV_LOG_FORMAT=\"\"' in your shell environment variables for a cleaner output of direnv"
      fi
    fi

    >&2 echo "ğŸ’¡ Run 'just' for a list of available 'just ...' helper recipes"
  '';
})  
